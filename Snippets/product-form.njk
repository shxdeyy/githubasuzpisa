<form @submit.prevent="buyNow">
  <div class="bg-card border-b border-x border-white/5 text-t-primary p-4 md:p-6 {{ 'rounded-lg' if properties.hide_products_sold }}">
    {% if product.variants.length > 1 %}
      <div class="mb-4 pb-4 border-b border-y-white/5">
        <label for="variant" class="block mb-2">Variant</label>
        {% if properties.variant_selector == 'dropdown' or is_embed %}
          <select name="variant" @change="() => activeVariant = $event.target.value" class="bg-white/[0.025] text-t-primary text-sm rounded-lg py-2.5 px-4 w-full">
            {% for variant in product.variants %}
              <option value="{{ loop.index0 }}" :selected="activeVariant == {{ loop.index0 }}">
                {{ variant.name }} ({{ formatPrice(variant.price, product.currency) }})
              </option>
            </template>
            {% endfor %}
          </select>
        {% else %}
          <div class="flex flex-col gap-2">
            {% for variant in product.variants %}
              <button
                type="button"
                class="flex items-center justify-between gap-4 px-4 py-2 transition-colors duration-300 ease-in-out border text-t-primary rounded-lg bg-none border-transparent"
                :class="`${activeVariant == {{ loop.index0 }} ? 'bg-white/[0.025] !border-accent-500' : 'bg-none border-transparent'} ${({{ 'true' if variant.stock === 0 else 'false' }} || activeVariant == {{ loop.index0 }}) ? '' : 'hover:bg-white/[0.025]'}`"
                @click="() => activeVariant = {{ loop.index0 }}"
                {{ 'title="Out of Stock"' if variant.stock === 0 }}
                {{ 'disabled' if variant.stock === 0 }}
              >
                <div class="flex-1 flex flex-col items-start gap-1 text-left">
                  <p class="text-base">{{ variant.name }}</p>
                  {% if variant.description %}
                    <p class="mb-1 text-xs text-t-primary/50">{{ variant.description }}</p>
                  {% endif %}
                  <p class="text-xs text-t-primary/75">
                    {% if variant.stock === 0 %}
                      <span>Out of stock</span>
                    {% elif product.hide_stock_count %}
                      <span>In stock</span>
                    {% elif variant.stock === -1 %}
                      <span class="inline-flex items-center gap-1">
                        <svg xmlns="http://www.w3.org/2000/svg" class="text-accent-500 size-4" fill="currentColor" viewBox="0 0 256 256"><path d="M248,128a56,56,0,0,1-95.6,39.6l-.33-.35L92.12,99.55a40,40,0,1,0,0,56.9l8.52-9.62a8,8,0,1,1,12,10.61l-8.69,9.81-.33.35a56,56,0,1,1,0-79.2l.33.35,59.95,67.7a40,40,0,1,0,0-56.9l-8.52,9.62a8,8,0,1,1-12-10.61l8.69-9.81.33-.35A56,56,0,0,1,248,128Z"></path></svg>
                        in stock
                      </span>
                    {% else %}
                      <span>{{ variant.stock }} in stock</span>
                    {% endif %}
                  </p>
                </div>
                <div class="bg-white/[0.025] text-t-primary text-sm px-2 py-1 rounded-lg">
                  <span>{{ formatPrice(variant.price, product.currency) }}</span>
                  {% if variant.price_slash %}
                    <span class="text-xs text-t-primary/50 line-through">{{ formatPrice(variant.price_slash, product.currency) }}</span>
                  {% endif %}
                </div>
              </button>
            {% endfor %}
          </div>
        {% endif %}
        <small x-show="!(activeVariant in product.variants)" x-cloak class="text-red-500">
          Please select a variant.
        </small>
      </div>
    {% endif %}

    <div class="mb-4 pb-4 border-b border-y-white/5">
      <label for="quantity" class="block mb-2">Quantity</label>
      <div class="flex rounded-lg overflow-hidden focus-within:border-accent-500 focus-within:ring-accent-500 focus-within:ring-2 focus-within:ring-opacity-50">
        <button
          @click="changeQuantity(quantity - 1)"
          type="button"
          class="bg-white/5 hover:bg-accent-500 size-[36px] flex justify-center items-center transition-colors duration-300 ease-in-out disabled:pointer-events-none disabled:opacity-50"
          :disabled="outOfStock || quantity <= minQuantity"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="size-5"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M19.5 12h-15"
            />
          </svg>
        </button>
        <input
          type="number"
          class="w-[calc(100%-72px)] bg-white/[0.025] text-t-primary text-sm focus:outline-none py-2 px-4 disabled:opacity-50"
          name="quantity"
          x-model.number="quantity"
          :disabled="outOfStock"
        />
        <button
          @click="changeQuantity(quantity + 1)"
          type="button"
          class="bg-white/5 hover:bg-accent-500 size-[36px] flex justify-center items-center transition-colors duration-300 ease-in-out disabled:pointer-events-none disabled:opacity-50"
          :disabled="outOfStock || quantity >= maxQuantity"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="size-5"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M12 4.5v15m7.5-7.5h-15"
            />
          </svg>
        </button>
      </div>

      <small
        x-show="!outOfStock && (quantity < minQuantity || quantity > maxQuantity)"
        x-cloak
        class="text-red-500"
      >
        Please enter a valid quantity (from <span x-text="minQuantity"></span> to <span x-text="maxQuantity"></span>).
      </small>

      <div
        {{ 'x-cloak' if not product.volume_discounts }}
        x-show="availableVolumeDiscount"
        class="transition-opacity"
        x-transition:enter="transition ease-out duration-300 transform"
        x-transition:enter-start="opacity-0" 
        x-transition:enter-end="opacity-100"
        x-transition:leave="transition ease-in duration-200 transform"
        x-transition:leave-start="opacity-100" 
        x-transition:leave-end="opacity-0"
      >
        <div class="bg-white/[0.025] text-t-primary text-sm/50 text-center text-sm rounded-lg p-1.5 mt-2 w-full">
          Buy <span x-text="(availableVolumeDiscount?.quantity - quantity) || 0"></span> more to get a <span x-text="(availableVolumeDiscount?.percentage) || 0"></span>% discount.
        </div>
      </div>
    </div>

    {% if altcha and not properties.hide_buy_now %}
      <div
        x-cloak
        x-show="!altchaPayload"
        class="transition-opacity"
        x-transition:enter="transition ease-out duration-300 transform"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="transition ease-in duration-200 transform"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
      >
        <altcha-widget
          challengejson='{{ altcha | json }}'
          auto="onload"
          hidefooter="true"
          hidelogo="true"
          x-ref="altcha"
        ></altcha-widget>
      </div>
    {% endif %}
    
    <div
      x-cloak
      x-show="buyNowError"
      class="transition-opacity"
      x-transition:enter="transition ease-out duration-300 transform"
      x-transition:enter-start="opacity-0" 
      x-transition:enter-end="opacity-100"
      x-transition:leave="transition ease-in duration-200 transform"
      x-transition:leave-start="opacity-100" 
      x-transition:leave-end="opacity-0"
    >
      <div class="bg-red-500 border-2 border-white/5 text-t-primary p-4 rounded-lg mt-4">
        <span x-text="buyNowError"></span>
      </div>
    </div>
    
    <div class="flex flex-col gap-4 mt-4 lg:flex-row">
      {% if not properties.hide_add_to_cart %}
        <button
          type="button"
          x-on:click="addToCart"
          class="px-6 py-2 rounded-lg flex-1 flex justify-center items-center gap-4 border font-semibold bg-accent-500 border-accent-500 text-t-accent hover:enabled:bg-accent-500/50 transition-colors duration-300 ease-in-out disabled:opacity-50 disabled:pointer-events-none"
          :disabled="outOfStock || product.visibility == 'on_hold' || cartLimitReached || addingToCart"
        >
          <template x-if="!addingToCart && !addedToCart">
            <span class="inline-flex justify-center items-center gap-4">
              <span x-text="cartLimitReached ? 'Cart Limit Reached' : 'Add to Cart'"></span>
              <svg xmlns="http://www.w3.org/2000/svg" class="size-5" fill="currentColor" viewBox="0 0 256 256"><path d="M230.14,58.87A8,8,0,0,0,224,56H62.68L56.6,22.57A8,8,0,0,0,48.73,16H24a8,8,0,0,0,0,16h18L67.56,172.29a24,24,0,0,0,5.33,11.27,28,28,0,1,0,44.4,8.44h45.42A27.75,27.75,0,0,0,160,204a28,28,0,1,0,28-28H91.17a8,8,0,0,1-7.87-6.57L80.13,152h116a24,24,0,0,0,23.61-19.71l12.16-66.86A8,8,0,0,0,230.14,58.87ZM104,204a12,12,0,1,1-12-12A12,12,0,0,1,104,204Zm96,0a12,12,0,1,1-12-12A12,12,0,0,1,200,204Zm4-74.57A8,8,0,0,1,196.1,136H77.22L65.59,72H214.41Z"></path></svg>
            </span>
          </template>
          <template x-if="addingToCart">
            <span class="inline-flex justify-center items-center gap-4">
              <span>Adding...&nbsp;&nbsp;</span>
              <svg xmlns="http://www.w3.org/2000/svg" class="size-5 animate-spin" fill="currentColor" viewBox="0 0 256 256"><path d="M232,128a104,104,0,0,1-208,0c0-41,23.81-78.36,60.66-95.27a8,8,0,0,1,6.68,14.54C60.15,61.59,40,93.27,40,128a88,88,0,0,0,176,0c0-34.73-20.15-66.41-51.34-80.73a8,8,0,0,1,6.68-14.54C208.19,49.64,232,87,232,128Z"></path></svg>
            </span>
          </template>
          <template x-if="addedToCart">
            <span class="inline-flex justify-center items-center gap-4">
              <span>Go to Cart</span>
              <svg xmlns="http://www.w3.org/2000/svg" class="size-5" fill="currentColor" viewBox="0 0 256 256"><path d="M221.66,133.66l-72,72a8,8,0,0,1-11.32-11.32L196.69,136H40a8,8,0,0,1,0-16H196.69L138.34,61.66a8,8,0,0,1,11.32-11.32l72,72A8,8,0,0,1,221.66,133.66Z"></path></svg>
            </span>
          </template>
        </button>
      {% endif %}
      {% if not properties.hide_buy_now %}
        <button
          type="submit"
          class="px-6 py-2 rounded-lg flex-1 flex justify-center items-center gap-4 border font-semibold border-accent-500 text-accent-500 hover:enabled:bg-accent-500/10 transition-colors duration-300 ease-in-out disabled:opacity-50 disabled:pointer-events-none"
          :disabled="outOfStock || product.visibility == 'on_hold' || buyingNow || buyNowDisabled"
        >
          <span>Buy Now</span>
          <template x-if="!buyingNow">
            <svg xmlns="http://www.w3.org/2000/svg" class="size-5" fill="currentColor" viewBox="0 0 256 256"><path d="M237.66,122.34l-96-96A8,8,0,0,0,128,32V72H104a8,8,0,0,0-8,8v96a8,8,0,0,0,8,8h24v40a8,8,0,0,0,13.66,5.66l96-96A8,8,0,0,0,237.66,122.34ZM144,204.69V176a8,8,0,0,0-8-8H112V88h24a8,8,0,0,0,8-8V51.31L220.69,128ZM48,80v96a8,8,0,0,1-16,0V80a8,8,0,0,1,16,0Zm32,0v96a8,8,0,0,1-16,0V80a8,8,0,0,1,16,0Z"></path></svg>
          </template>
          <template x-if="buyingNow">
            <svg xmlns="http://www.w3.org/2000/svg" class="size-5 animate-spin" fill="currentColor" viewBox="0 0 256 256"><path d="M232,128a104,104,0,0,1-208,0c0-41,23.81-78.36,60.66-95.27a8,8,0,0,1,6.68,14.54C60.15,61.59,40,93.27,40,128a88,88,0,0,0,176,0c0-34.73-20.15-66.41-51.34-80.73a8,8,0,0,1,6.68-14.54C208.19,49.64,232,87,232,128Z"></path></svg>
          </template>
        </button>
      {% endif %}
    </div>
  </div>
</form>

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('productForm', () => ({
      product: {{ product | json }},
      activeVariant: 0,
      quantity: {{ product.quantity_min or 1 }},
      isEmbed: {{ 'true' if is_embed else 'false' }},
      addingToCart: false,
      addedToCart: false,
      buyingNow: false,
      buyNowError: null,
      buyNowDisabled: false,
      altchaPayload: null,

      get variant() {
        return this.product.variants[this.activeVariant];
      },

      init: function () {
        // Choose the first variant that has stock.
        for (let i = 0; i < this.product.variants.length; i++) {
          if (this.product.variants[i].stock !== 0) {
            this.activeVariant = i;
            break;
          }
        }

        if (!this.activeVariant) {
          this.activeVariant = 0;
        }

        if (this.variant.quantity_min) {
          this.quantity = this.variant.quantity_min;
        }

        this.$watch('activeVariant', () => {
          this.quantity = this.product.quantity_min || 1;

          if (this.variant.quantity_min) {
            this.quantity = this.variant.quantity_min;
          }

          this.addedToCart = false;
        });

        this.$watch('quantity', () => {
          this.addedToCart = false;
        });

        const that = this;

        // Prefill info from query params.
        const urlParams = new URLSearchParams(window.location.search);

        if (urlParams.has('quantity')) {
          this.quantity = parseInt(urlParams.get('quantity'));
        }

        if (urlParams.has('variant')) {
          const variantIndex = this.product.variants.findIndex(variant => variant.name === urlParams.get('variant'));
          if (variantIndex !== -1) {
            this.activeVariant = variantIndex;
          }
        }

        {% if altcha and not properties.hide_buy_now %}
          this.addAltchaEventListener();
        {% endif %}
      },

      get availableVolumeDiscount() {
        if (this.product.volume_discounts) {
          const volumeDiscounts = this.product.volume_discounts.sort((a, b) => a.quantity - b.quantity);

          for (const volumeDiscount of volumeDiscounts) {
            if (this.quantity < parseInt(volumeDiscount.quantity)) {
              return volumeDiscount;
            }
          }
        }

        return null;
      },

      get totalPrice() {
        let price = this.variant.price * this.quantity;
        let priceBeforeDiscounts = price;

        // Apply volume discounts
        if (this.product.volume_discounts) {
          const volumeDiscounts = this.product.volume_discounts.sort((a, b) => b.quantity - a.quantity);

          for (const volumeDiscount of volumeDiscounts) {
            if (this.quantity >= parseInt(volumeDiscount.quantity)) {
              price = price - (priceBeforeDiscounts * parseInt(volumeDiscount.percentage) / 100);
              break;
            }
          }
        }

        // If price is negative, set it to 0
        if (price < 0) {
          price = 0;
        }

        // Format the price to have 2 decimal places
        const formattedPrice = price.toFixed(2);

        return formattedPrice;
      },

      get outOfStock() {
        if (this.variant) {
          if (this.variant.stock === 0) {
            return true;
          }

          if (this.variant.quantity_min > 0 && this.variant.stock !== -1 && !this.product.hide_stock_count && this.variant.stock < this.variant.quantity_min) {
            return true;
          }
        }

        return false;
      },

      get minQuantity() {
        const min = this.variant.quantity_min || 1;

        if (this.variant.stock === 0) {
          return 0;
        }

        return min;
      },

      get maxQuantity() {
        const max = this.variant.quantity_max || 10000;

        if (this.variant.stock === 0) {
          return 0;
        }

        if (this.product.hide_stock_count) {
          return max;
        }

        if (this.variant.stock === -1) {
          return max;
        }

        return Math.min(max, this.variant.stock);
      },

      changeQuantity: function (quantity) {
        const min = this.minQuantity;
        const max = this.maxQuantity;
        const newQuantity = Math.min(Math.max(min, quantity), max);

        this.quantity = newQuantity;
      },

      get cartLimitReached() {
        return this.appCart.items.length >= {{ shop.max_cart_limit }};
      },

      addToCart: function () {
        if (this.addedToCart) {
          window.location.href = '{{ '/cart' | shopUrl }}';
          return;
        }

        this.addingToCart = true;

        const productId = this.product.id;
        const variantId = this.variant.id;
        const quantity = this.quantity;

        this.appCart.add(productId, variantId, quantity);

        setTimeout(() => {
          this.addedToCart = true;
          this.addingToCart = false;
        }, 1000);
      },

      addAltchaEventListener: function () {
        this.$refs.altcha.addEventListener('statechange', (event) => {
          if (event.detail.state === 'verifying') {
            this.buyNowDisabled = true;
          } else if (event.detail.state === 'verified') {
            this.buyNowDisabled = false;
            this.altchaPayload = event.detail.payload;
          }
        });
      },

      generateRecaptchaToken: async function () {
        return new Promise((resolve) => {
          grecaptcha.ready(
            () =>
              void (async () => {
                const token = await grecaptcha.execute(
                  '{{ shop.recaptcha_key }}',
                  { action: 'buynow_s{{ shop.id }}' },
                );

                resolve(token);
              })(),
          );
        });
      },

      buyNow: async function () {
        if (this.buyingNow) {
          return;
        }

        const formData = {
          cart: [{
            productId: this.product.id,
            variantId: this.variant.id,
            quantity: this.quantity,
          }],
          shopId: '{{ shop.id }}',
        };

        {% if altcha %}
          if (this.altchaPayload) {
            formData.altcha = this.altchaPayload;
          }
        {% elif shop.recaptcha_key %}
          try {
            formData.recaptchaToken = await this.generateRecaptchaToken();
          } catch (error) {
            this.buyNowError = 'reCAPTCHA cannot be loaded. Please refresh the page and turn off any ad blockers.';
            this.buyingNow = false;
            return;
          }
        {% endif %}

        try {
          this.buyingNow = true;

          const response = await fetch('{{ '/v1/checkout' | apiInternalUrl }}', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData),
          });

          const responseData = await response.json();

          if (responseData.url) {
            this.checkoutUrl = responseData.url;

            // Open in new tab if we're in an embed.
            if (this.isEmbed) {
              window.open(this.checkoutUrl, '_blank');
              this.isLoadingModalOpen = true;
            } else {
              window.location.href = this.checkoutUrl;
            }
          } else {
            this.buyingNow = false;
            this.buyNowError = responseData?.message || 'Error in the AJAX request.';
          }
        } catch (error) {
          console.error(error);
          this.buyingNow = false;
          this.buyNowError = 'Unexpected error. Please refresh the page and try again.';
        }
      },

      formatPrice: function (price) {
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: '{{ product.currency }}',
          currencyDisplay: 'symbol'
        }).format(price);
      },
    }));
  });
</script>

<script>
  window.addEventListener('load', () => {
    if (document.querySelector('select[name="variant"]')) {
     new Choices('select[name="variant"]', { searchPlaceholderValue: 'Search for a variant...', shouldSort: false });
    }

    document.querySelectorAll('.custom-fields select').forEach((select) => {
      new Choices(select, { searchPlaceholderValue: 'Search for an option...', shouldSort: false });
    });
  });
</script>

{% if not properties.hide_buy_now %}
  {% if altcha %}
    <script type="module">
      import altcha from 'https://cdn.jsdelivr.net/npm/altcha@1.2.0/+esm'
    </script>
  {% elif shop.recaptcha_key %}
    <script src="https://www.google.com/recaptcha/api.js?render={{ shop.recaptcha_key }}"></script>
  {% endif %}
{% endif %}