<section class="component" data-component-id="{{ componentId }}">
  <div x-data="cartPage">
    <div class="py-6 lg:py-8">
      <div class="flex flex-col gap-4 mb-16 lg:flex-row lg:gap-8 lg:mb-32">
        <div class="lg:w-3/4">
          <div
            x-cloak
            x-show="fullCartShowMessages"
            class="transition-opacity"
            x-transition:enter="transition ease-out duration-300 transform"
            x-transition:enter-start="opacity-0" 
            x-transition:enter-end="opacity-100"
            x-transition:leave="transition ease-in duration-200 transform"
            x-transition:leave-start="opacity-100" 
            x-transition:leave-end="opacity-0"
          >
            <div class="bg-accent-500/10 border border-accent-500 text-accent-500 p-4 rounded-lg mb-4">
              <template x-for="(message, index) in fullCartMessages" :key="index">
                <p x-text="message"></p>
              </template>
            </div>
          </div>

          <div>
            <div x-show="fullCartLoading" class="p-4 border border-white/5 rounded-lg bg-card text-t-primary text-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="inline-block text-accent-500 size-6 md:size-8 lg:size-10" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-dasharray="16" stroke-dashoffset="16" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3c4.97 0 9 4.03 9 9"><animate fill="freeze" attributeName="stroke-dashoffset" dur="0.2s" values="16;0"/><animateTransform attributeName="transform" dur="1.5s" repeatCount="indefinite" type="rotate" values="0 12 12;360 12 12"/></path></svg>
            </div>

            <template x-if="!fullCartLoading">
              <div>
                <template x-if="fullCart.length === 0">
                  <div class="p-4 border border-white/5 rounded-lg bg-card text-t-primary">
                    <p class="text-center text-t-primary/75">Your cart is empty.</p>
                  </div>
                </template>

                <template x-if="fullCart.length > 0">
                  <div class="flex flex-col gap-3 md:gap-4 lg:gap-5">
                    <template x-for="(cartItem, index) in fullCart" :key="index">
                      <div class="flex flex-col p-1 sm:flex-row sm:justify-between sm:p-0 border border-white/5 rounded-lg bg-card text-t-primary">
                        <div class="flex-1 flex gap-2 truncate sm:gap-3 md:gap-4">
                          <div class="flex justify-center items-center w-full max-w-24 aspect-video relative pl-1 py-1 sm:max-w-36 sm:pl-3 sm:py-3">
                            <template x-if="cartItem.product.image_url">
                              <img :src="cartItem.product.image_url" class="aspect-video w-full rounded-lg object-cover" loading="lazy" />
                            </template>
                            <template x-if="!cartItem.product.image_url">
                              <div class="aspect-video flex justify-center items-center text-accent-400">
                                <svg xmlns="http://www.w3.org/2000/svg" class="size-16" viewBox="0 0 256 256">
                                  <path
                                    fill="currentColor"
                                    d="m222.72 67.91l-88-48.18a13.9 13.9 0 0 0-13.44 0l-88 48.18A14 14 0 0 0 26 80.18v95.64a14 14 0 0 0 7.28 12.27l88 48.18a13.92 13.92 0 0 0 13.44 0l88-48.18a14 14 0 0 0 7.28-12.27V80.18a14 14 0 0 0-7.28-12.27ZM127 30.25a2 2 0 0 1 1.92 0L212.51 76l-33.94 18.57l-84.52-46.26ZM122 223l-83-45.43a2 2 0 0 1-1-1.75V86.66l84 46ZM43.49 76l38.07-20.85l84.51 46.26L128 122.24ZM218 175.82a2 2 0 0 1-1 1.75L134 223v-90.36l36-19.71V152a6 6 0 0 0 12 0v-45.63l36-19.71Z"
                                  />
                                </svg>
                              </div>
                            </template>
                          </div>

                          <div class="flex-1 text-left pr-2 py-1 truncate sm:pr-3 sm:py-3">
                            <div class="flex justify-between items-center gap-2 truncate">
                              <a :href="'{{ '/product/' | shopUrl }}' + cartItem.product.path" class="text-t-primary text-base font-bold truncate sm:text-lg hover:underline">
                                <span x-text="cartItem.product.name"></span>
                              </a>
                              <button
                                type="button"
                                @click="removeItem(index)"
                                class="text-t-primary focus:outline-none hover:text-accent-500 sm:hidden"
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" class="size-4 sm:size-5" viewBox="0 0 24 24"><path fill="currentColor" d="m12 13.4l-4.9 4.9q-.275.275-.7.275t-.7-.275t-.275-.7t.275-.7l4.9-4.9l-4.9-4.9q-.275-.275-.275-.7t.275-.7t.7-.275t.7.275l4.9 4.9l4.9-4.9q.275-.275.7-.275t.7.275t.275.7t-.275.7L13.4 12l4.9 4.9q.275.275.275.7t-.275.7t-.7.275t-.7-.275z"/></svg>
                              </button>
                            </div>
                            <p class="mb-px text-t-primary/75 text-sm truncate sm:mb-0.5 sm:text-base" x-text="cartItem.variant.name"></p>
                            <template x-if="getAvailableVolumeDiscount(index)">
                              <div class="text-t-primary/50 text-xs truncate sm:text-s">
                                Buy <span x-text="getAvailableVolumeDiscount(index)?.quantity - cartItem.quantity"></span> more to get a <span x-text="getAvailableVolumeDiscount(index)?.percentage"></span>% discount.
                              </div>
                            </template>
                          </div>
                        </div>
                        <div class="flex items-center justify-between pl-1 pr-4 pt-2 pb-1.5 mt-2 border-t border-t-white/5 sm:border-t-0 sm:justify-end sm:pl-0 sm:py-0 sm:mt-0 md:gap-6 lg:gap-8 lg:pr-8">
                          <div class="max-w-32 flex rounded-lg overflow-hidden focus-within:border-accent-500 focus-within:ring-accent-500 focus-within:ring-2 focus-within:ring-opacity-50">
                            <button
                              type="button"
                              @click="changeQuantity(index, cartItem.quantity - 1)"
                              :disabled="cartItem.quantity <= getMinQuantity(index)"
                              class="bg-white/5 hover:bg-accent-500 size-8 flex justify-center items-center transition-colors duration-300 ease-in-out disabled:pointer-events-none disabled:opacity-50"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" class="size-4" viewBox="0 0 24 24"><path fill="currentColor" d="M6 13q-.425 0-.712-.288T5 12t.288-.712T6 11h12q.425 0 .713.288T19 12t-.288.713T18 13z"/></svg>
                            </button>
                            <input
                              type="number"
                              x-model.number="cartItem.quantity"
                              class="w-[calc(100%-64px)] bg-white/[0.025] text-center text-t-primary text-sm focus:outline-none py-1.5 px-3 disabled:opacity-50"
                            />
                            <button
                              type="button"
                              @click="changeQuantity(index, cartItem.quantity + 1)"
                              :disabled="cartItem.quantity >= getMaxQuantity(index)"
                              class="bg-white/5 hover:bg-accent-500 size-8 flex justify-center items-center transition-colors duration-300 ease-in-out disabled:pointer-events-none disabled:opacity-50"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" class="size-4" viewBox="0 0 24 24"><path fill="currentColor" d="M11 13H6q-.425 0-.712-.288T5 12t.288-.712T6 11h5V6q0-.425.288-.712T12 5t.713.288T13 6v5h5q.425 0 .713.288T19 12t-.288.713T18 13h-5v5q0 .425-.288.713T12 19t-.712-.288T11 18z"/></svg>
                            </button>
                          </div>
                          <div>
                            <p class="text-base text-t-primary text-center font-medium sm:min-w-20 sm:text-lg">
                              <span x-text="formatPrice(getItemSinglePrice(index), cartItem.product.currency)"></span>
                            </p>
                          </div>
                          <button
                            type="button"
                            @click="removeItem(index)"
                            class="hidden text-t-primary focus:outline-none hover:text-accent sm:block"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" class="size-4 sm:size-5" fill="currentColor" viewBox="0 0 256 256"><path d="M205.66,194.34a8,8,0,0,1-11.32,11.32L128,139.31,61.66,205.66a8,8,0,0,1-11.32-11.32L116.69,128,50.34,61.66A8,8,0,0,1,61.66,50.34L128,116.69l66.34-66.35a8,8,0,0,1,11.32,11.32L139.31,128Z"></path></svg>
                          </button>
                        </div>
                      </div>
                    </template>
                  </div>
                </template>
              </div>
            </template>
          </div>
        </div>
        <div class="lg:w-1/4">
          <div class="flex flex-col justify-between gap-4 rounded-lg bg-card border border-white/5 p-4 md:p-5 lg:p-6 text-t-primary">
            <form @submit.prevent="checkout">
              <div class="mb-4 pb-2 border-b border-y-white/5">
                <label class="block mb-2">Your Order</label>
                <div>
                  <div class="flex items-center justify-between mb-1">
                    <span class="text-sm text-t-primary/50">
                      Subtotal
                    </span>
                    <span class="text-sm text-t-primary/75">
                      <span x-text="formatPrice(cartTotalPrice, cartCurrency)"></span>
                    </span>
                  </div>
                </div>
              </div>

              {% if altcha %}
                <div
                  x-cloak
                  x-show="!altchaPayload"
                  class="transition-opacity"
                  x-transition:enter="transition ease-out duration-300 transform"
                  x-transition:enter-start="opacity-0"
                  x-transition:enter-end="opacity-100"
                  x-transition:leave="transition ease-in duration-200 transform"
                  x-transition:leave-start="opacity-100"
                  x-transition:leave-end="opacity-0"
                >
                  <altcha-widget
                    challengejson='{{ altcha | json }}'
                    auto="onload"
                    hidefooter="true"
                    hidelogo="true"
                    x-ref="altcha"
                  ></altcha-widget>
                </div>
              {% endif %}

              <div
                x-cloak
                x-show="submitError"
                class="transition-opacity"
                x-transition:enter="transition ease-out duration-300 transform"
                x-transition:enter-start="opacity-0" 
                x-transition:enter-end="opacity-100"
                x-transition:leave="transition ease-in duration-200 transform"
                x-transition:leave-start="opacity-100" 
                x-transition:leave-end="opacity-0"
              >
                <div class="bg-red-500 border border-white/5 text-t-primary p-4 rounded-lg mt-4">
                  <span x-text="submitError"></span>
                </div>
              </div>

              <button
                type="submit"
                :disabled="fullCartLoading || fullCart.length === 0 || isSubmitting || submitDisabled"
                class="px-6 py-2 mt-4 rounded-lg w-full flex justify-center items-center gap-4 border font-semibold bg-accent-500 border-accent-500 text-t-accent hover:enabled:bg-accent-500/50 transition-colors duration-300 ease-in-out disabled:opacity-50 disabled:pointer-events-none"
              >
                <span>Checkout</span>
                <template x-if="!isSubmitting">
                  <svg xmlns="http://www.w3.org/2000/svg" class="size-5" fill="currentColor" viewBox="0 0 256 256"><path d="M230.14,58.87A8,8,0,0,0,224,56H62.68L56.6,22.57A8,8,0,0,0,48.73,16H24a8,8,0,0,0,0,16h18L67.56,172.29a24,24,0,0,0,5.33,11.27,28,28,0,1,0,44.4,8.44h45.42A27.75,27.75,0,0,0,160,204a28,28,0,1,0,28-28H91.17a8,8,0,0,1-7.87-6.57L80.13,152h116a24,24,0,0,0,23.61-19.71l12.16-66.86A8,8,0,0,0,230.14,58.87ZM104,204a12,12,0,1,1-12-12A12,12,0,0,1,104,204Zm96,0a12,12,0,1,1-12-12A12,12,0,0,1,200,204Zm4-74.57A8,8,0,0,1,196.1,136H77.22L65.59,72H214.41Z"></path></svg>
                </template>
                <template x-if="isSubmitting">
                  <svg xmlns="http://www.w3.org/2000/svg" class="size-5 animate-spin" fill="currentColor" viewBox="0 0 256 256"><path d="M232,128a104,104,0,0,1-208,0c0-41,23.81-78.36,60.66-95.27a8,8,0,0,1,6.68,14.54C60.15,61.59,40,93.27,40,128a88,88,0,0,0,176,0c0-34.73-20.15-66.41-51.34-80.73a8,8,0,0,1,6.68-14.54C208.19,49.64,232,87,232,128Z"></path></svg>
                </template>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('cartPage', () => ({
      fullCart: [],
      fullCartLoading: false,
      fullCartMessages: [],
      fullCartShowMessages: false,
      isSubmitting: false,
      submitError: null,
      submitDisabled: false,
      altchaPayload: null,

      init: function () {
        if (this.appCart.items.length > 0) {
          this.fetchFullCart();
        }

        {% if altcha %}
          this.addAltchaEventListener();
        {% endif %}
      },

      fetchFullCart: async function () {
        this.fullCartLoading = true;
        this.fullCartMessages = [];
        this.fullCartShowMessages = false;

        const url = new URL('{{ '/v1/cart' | apiInternalUrl }}');
        url.searchParams.append('shopId', '{{ shop.id }}');
        url.searchParams.append('cart', JSON.stringify(this.appCart.items));

        try {
          const response = await fetch(url, {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
            },
          });

          const responseData = await response.json();

          if (responseData?.messages && responseData.messages.length > 0) {
            this.fullCartMessages = responseData.messages;
            this.fullCartShowMessages = true;
            setTimeout(() => {
              this.fullCartShowMessages = false;
            }, 5000);
          }

          // Update full cart state (this one contains product names, images, etc.)
          this.fullCart = responseData.fullCart;

          // Update global cart state
          this.appCart.set(responseData.cart);
        } catch (error) {
          console.error(error);
        } finally {
          this.fullCartLoading = false;
        }
      },

      getAvailableVolumeDiscount: function (index) {
        const item = this.fullCart[index];

        if (item.product.volume_discounts) {
          const volumeDiscounts = item.product.volume_discounts.sort((a, b) => a.quantity - b.quantity);

          for (const volumeDiscount of volumeDiscounts) {
            if (item.quantity < parseInt(volumeDiscount.quantity)) {
              return volumeDiscount;
            }
          }
        }

        return null;
      },

      getAppliedVolumeDiscount: function (index) {
        const item = this.fullCart[index];

        if (item.product.volume_discounts) {
          const volumeDiscounts = item.product.volume_discounts.sort((a, b) => b.quantity - a.quantity);

          for (const volumeDiscount of volumeDiscounts) {
            if (item.quantity >= parseInt(volumeDiscount.quantity)) {
              return volumeDiscount;
            }
          }
        }

        return null;
      },

      getMinQuantity: function (index) {
        const item = this.fullCart[index];
        
        const min = item.variant.quantity_min || 1;

        if (item.variant.stock === 0) {
          return 0;
        }

        return min;
      },

      getMaxQuantity: function (index) {
        const item = this.fullCart[index];
        
        const max = item.variant.quantity_max || 10000;

        if (item.variant.stock === 0) {
          return 0;
        }

        if (item.product.hide_stock_count) {
          return max;
        }

        if (item.variant.stock === -1) {
          return max;
        }

        return Math.min(max, item.variant.stock);
      },

      changeQuantity: function (index, quantity) {
        const min = this.getMinQuantity(index);
        const max = this.getMaxQuantity(index);
        const newQuantity = Math.min(Math.max(min, quantity), max);

        const item = this.fullCart[index];

        this.fullCart[index].quantity = newQuantity;
        this.appCart.editQuantity(item.variantId, newQuantity);
      },

      removeItem: function (index) {
        const item = this.fullCart[index];

        this.fullCart.splice(index, 1);

        this.appCart.remove(item.variant.id);
      },

      getItemSinglePrice: function (index) {
        const item = this.fullCart[index];

        const volumeDiscount = this.getAppliedVolumeDiscount(index);

        if (volumeDiscount) {
          return item.variant.price * (1 - volumeDiscount.percentage / 100);
        }

        return item.variant.price;
      },

      get cartCurrency() {
        return this.fullCart.length > 0 ? this.fullCart[0].product.currency : 'USD';
      },

      get cartTotalPrice() {
        return this.fullCart.reduce((acc, item) => acc + (item.quantity * this.getItemSinglePrice(this.fullCart.indexOf(item))), 0);
      },

      addAltchaEventListener: function () {
        this.$refs.altcha.addEventListener('statechange', (event) => {
          if (event.detail.state === 'verifying') {
            this.submitDisabled = true;
          } else if (event.detail.state === 'verified') {
            this.submitDisabled = false;
            this.altchaPayload = event.detail.payload;
          }
        });
      },

      generateRecaptchaToken: async function () {
        return new Promise((resolve) => {
          grecaptcha.ready(
            () =>
              void (async () => {
                const token = await grecaptcha.execute(
                  '{{ shop.recaptcha_key }}',
                  { action: 'checkout_s{{ shop.id }}' },
                );

                resolve(token);
              })(),
          );
        });
      },

      checkout: async function () {
        if (this.isSubmitting) {
          return;
        }

        const formData = {
          cart: this.appCart.items,
          shopId: '{{ shop.id }}',
        };

        {% if altcha %}
          if (this.altchaPayload) {
            formData.altcha = this.altchaPayload;
          }
        {% elif shop.recaptcha_key %}
          try {
            formData.recaptchaToken = await this.generateRecaptchaToken();
          } catch (error) {
            this.submitError = 'reCAPTCHA cannot be loaded. Please refresh the page and turn off any ad blockers.';
            this.isSubmitting = false;
            return;
          }
        {% endif %}

        try {
          this.isSubmitting = true;

          const response = await fetch('{{ '/v1/checkout' | apiInternalUrl }}', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData),
          });

          const responseData = await response.json();

          if (responseData.url) {
            localStorage.setItem('cart', JSON.stringify([]));
            window.location.href = responseData.url;
          } else {
            this.isSubmitting = false;
            this.submitError = responseData?.message || 'Error in the AJAX request.';
          }
        } catch (error) {
          console.error(error);
          this.isSubmitting = false;
          this.submitError = 'Unexpected error. Please refresh the page and try again.';
        }
      },

      formatPrice(price, currency) {
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: currency,
          currencyDisplay: 'symbol'
        }).format(price);
      },
    }));
  });
</script>

{% if altcha %}
  <script type="module">
    import altcha from 'https://cdn.jsdelivr.net/npm/altcha@1.2.0/+esm'
  </script>
{% elif shop.recaptcha_key %}
  <script src="https://www.google.com/recaptcha/api.js?render={{ shop.recaptcha_key }}"></script>
{% endif %}